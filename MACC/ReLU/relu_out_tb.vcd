$date
	Sat Apr 12 13:06:01 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module relu_out_tb $end
$var wire 8 ! val_out [7:0] $end
$var reg 1 " cmp_flag $end
$var reg 8 # cmp_val [7:0] $end
$var reg 16 $ val_in [15:0] $end
$scope module uut $end
$var wire 1 % cmp_flag $end
$var wire 8 & cmp_val [7:0] $end
$var wire 8 ' temp_clip [7:0] $end
$var wire 8 ( temp_relu [7:0] $end
$var wire 16 ) val_in [15:0] $end
$var reg 8 * val_out [7:0] $end
$scope module ReLU_inst $end
$var wire 8 + temp_relu [7:0] $end
$var wire 16 , val_in [15:0] $end
$upscope $end
$scope module Comparator1 $end
$var wire 8 - A [7:0] $end
$var wire 8 . B [7:0] $end
$var wire 8 / MUX_Out [7:0] $end
$var wire 1 0 O_A_Equal_B $end
$var wire 1 1 O_A_Greater_B $end
$var wire 1 2 O_A_Less_B $end
$var wire 1 3 lower_A_Equal_B $end
$var wire 1 4 lower_A_Greater_B $end
$var wire 1 5 lower_A_Less_B $end
$var wire 1 6 not_A7 $end
$var wire 1 7 not_B7 $end
$var wire 1 8 upper_A_Equal_B $end
$var wire 1 9 upper_A_Greater_B $end
$var wire 1 : upper_A_Less_B $end
$scope module lower_4bit $end
$var wire 4 ; A [3:0] $end
$var wire 1 3 A_eq_B $end
$var wire 1 < A_eq_B_in $end
$var wire 1 4 A_gt_B $end
$var wire 1 = A_gt_B_in $end
$var wire 1 5 A_lt_B $end
$var wire 1 > A_lt_B_in $end
$var wire 4 ? B [3:0] $end
$var wire 1 @ all_equal $end
$var wire 4 A x [3:0] $end
$var wire 4 B y [3:0] $end
$upscope $end
$scope module upper_4bit $end
$var wire 4 C A [3:0] $end
$var wire 1 8 A_eq_B $end
$var wire 1 3 A_eq_B_in $end
$var wire 1 9 A_gt_B $end
$var wire 1 4 A_gt_B_in $end
$var wire 1 : A_lt_B $end
$var wire 1 5 A_lt_B_in $end
$var wire 4 D B [3:0] $end
$var wire 1 E all_equal $end
$var wire 4 F x [3:0] $end
$var wire 4 G y [3:0] $end
$upscope $end
$scope module mux_8bit $end
$var wire 8 H in0 [7:0] $end
$var wire 8 I in1 [7:0] $end
$var wire 8 J out [7:0] $end
$var wire 1 1 sel $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b110010 J
b1100100 I
b110010 H
b101 G
b1010 F
0E
b1110 D
b1011 C
b1111 B
b1001 A
0@
b100 ?
1>
1=
1<
b10 ;
1:
09
08
17
16
15
04
03
12
01
00
b110010 /
b1100100 .
b110010 -
b110010 ,
b110010 +
b110010 *
b110010 )
b110010 (
b110010 '
b1100100 &
0%
b110010 $
b1100100 #
0"
b110010 !
$end
#10000
b10010110 *
b10010110 !
04
13
1@
05
b1101 A
b0 F
b1011 B
b1111 G
06
b110 ;
b1 C
b10010110 '
b10010110 /
b10010110 J
b10010110 (
b10010110 +
b10010110 -
b10010110 H
b10010110 $
b10010110 )
b10010110 ,
#20000
b0 *
b0 !
15
09
01
1:
12
03
0@
b1111 B
b1011 A
b1001 F
b111 G
16
b0 ;
b1000 C
b0 '
b0 /
b0 J
b0 (
b0 +
b0 -
b0 H
b1111111111101100 $
b1111111111101100 )
b1111111111101100 ,
#30000
b110010 *
b110010 !
b1001 A
b1010 F
b101 G
b10 ;
b1011 C
b110010 '
b110010 /
b110010 J
b110010 (
b110010 +
b110010 -
b110010 H
b110010 $
b110010 )
b110010 ,
1"
1%
#40000
b10010110 *
b10010110 !
04
13
1@
05
b1101 A
b0 F
b1011 B
b1111 G
06
b110 ;
b1 C
b10010110 '
b10010110 /
b10010110 J
b10010110 (
b10010110 +
b10010110 -
b10010110 H
b10010110 $
b10010110 )
b10010110 ,
#50000
b110010 *
b110010 !
19
11
14
0:
02
03
0@
b1011 A
b1000 F
16
b1101 B
b111 G
b1100 C
b110010 '
b110010 /
b110010 J
b1000110 (
b1000110 +
b1000110 -
b1000110 H
b10 ?
b1011 D
b1000110 $
b1000110 )
b1000110 ,
b110010 #
b110010 &
b110010 .
b110010 I
#60000
b11001000 *
b11001000 !
15
0E
19
11
04
b111 A
b11 F
b0 ;
16
b1111 B
b1111 G
b1000 C
b0 (
b0 +
b0 -
b0 H
07
b1000 ?
b100 D
b11001000 '
b11001000 /
b11001000 J
b1111111111110110 $
b1111111111110110 )
b1111111111110110 ,
b11001000 #
b11001000 &
b11001000 .
b11001000 I
#80000
