$date
	Mon Mar 31 11:55:12 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module tb_sqrt_csa_bec $end
$var wire 10 ! Out [9:0] $end
$var reg 9 " A [8:0] $end
$var reg 9 # B [8:0] $end
$var reg 1 $ Cin $end
$scope module uut $end
$var wire 9 % A [8:0] $end
$var wire 9 & B [8:0] $end
$var wire 1 ' Cin $end
$var wire 10 ( Out [9:0] $end
$var wire 3 ) o_rsa_2bit [2:0] $end
$var wire 4 * o_rsa_3bit [3:0] $end
$var wire 4 + o_rsa_3bit_add [3:0] $end
$var wire 4 , o_rsa_3bit_sub [3:0] $end
$var wire 5 - o_rsa_4bit [4:0] $end
$var wire 5 . o_rsa_4bit_add [4:0] $end
$var wire 5 / o_rsa_4bit_sub [4:0] $end
$scope module rsa_2bit $end
$var wire 2 0 A [1:0] $end
$var wire 2 1 B [1:0] $end
$var wire 2 2 B_xor [1:0] $end
$var wire 1 ' Cin $end
$var wire 1 3 Cout $end
$var wire 2 4 Sum [1:0] $end
$var wire 3 5 carry [2:0] $end
$var wire 1 6 carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 7 A $end
$var wire 1 8 B $end
$var wire 1 9 Cin $end
$var wire 1 : Cout $end
$var wire 1 ; Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 < A $end
$var wire 1 = B $end
$var wire 1 > Cin $end
$var wire 1 ? Cout $end
$var wire 1 @ Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_3bit $end
$var wire 3 A A [2:0] $end
$var wire 3 B B [2:0] $end
$var wire 3 C B_xor [2:0] $end
$var wire 1 ' Cin $end
$var wire 1 D Cout $end
$var wire 3 E Sum [2:0] $end
$var wire 4 F carry [3:0] $end
$var wire 1 G carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 H A $end
$var wire 1 I B $end
$var wire 1 J Cin $end
$var wire 1 K Cout $end
$var wire 1 L Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 M A $end
$var wire 1 N B $end
$var wire 1 O Cin $end
$var wire 1 P Cout $end
$var wire 1 Q Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 R A $end
$var wire 1 S B $end
$var wire 1 T Cin $end
$var wire 1 U Cout $end
$var wire 1 V Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_4bit $end
$var wire 4 W A [3:0] $end
$var wire 4 X B [3:0] $end
$var wire 4 Y B_xor [3:0] $end
$var wire 1 ' Cin $end
$var wire 1 Z Cout $end
$var wire 4 [ Sum [3:0] $end
$var wire 5 \ carry [4:0] $end
$var wire 1 ] carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 ^ A $end
$var wire 1 _ B $end
$var wire 1 ` Cin $end
$var wire 1 a Cout $end
$var wire 1 b Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 c A $end
$var wire 1 d B $end
$var wire 1 e Cin $end
$var wire 1 f Cout $end
$var wire 1 g Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 h A $end
$var wire 1 i B $end
$var wire 1 j Cin $end
$var wire 1 k Cout $end
$var wire 1 l Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[3] $end
$scope module FA $end
$var wire 1 m A $end
$var wire 1 n B $end
$var wire 1 o Cin $end
$var wire 1 p Cout $end
$var wire 1 q Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module bec_rsa_3bit $end
$var wire 4 r B [3:0] $end
$var wire 4 s X [3:0] $end
$upscope $end
$scope module bec_rsa_4bit $end
$var wire 2 t AND_out [1:0] $end
$var wire 5 u B [4:0] $end
$var wire 5 v X [4:0] $end
$upscope $end
$scope module mux_rsa_3bit $end
$var wire 4 w In0 [3:0] $end
$var wire 4 x In1 [3:0] $end
$var wire 4 y Out [3:0] $end
$var wire 1 z Sel $end
$upscope $end
$scope module mux_rsa_4bit $end
$var wire 5 { In0 [4:0] $end
$var wire 5 | In1 [4:0] $end
$var wire 5 } Out [4:0] $end
$var wire 1 ~ Sel $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0~
b0 }
b1 |
b0 {
0z
b0 y
b1 x
b0 w
b1 v
b0 u
b0 t
b1 s
b0 r
0q
0p
0o
0n
0m
0l
0k
0j
0i
0h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
b0 \
b0 [
0Z
b0 Y
b0 X
b0 W
0V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
b0 F
b0 E
0D
b0 C
b0 B
b0 A
0@
0?
0>
0=
0<
0;
0:
09
08
07
06
b0 5
b0 4
03
b0 2
b0 1
b0 0
b1 /
b0 .
b0 -
b1 ,
b0 +
b0 *
b0 )
b0 (
0'
b0 &
b0 %
0$
b0 #
b0 "
b0 !
$end
#10
1@
1>
1:
b10 5
b10 !
b10 (
0;
b10 )
b10 4
18
b1 2
17
b1 1
b1 0
b1 #
b1 &
b1 "
b1 %
#20
b1 *
b1 y
1z
13
0>
16
0:
b101 !
b101 (
1?
b100 5
1;
0@
b101 )
b1 4
1=
b11 2
07
1<
b11 1
b10 0
b11 #
b11 &
b10 "
b10 %
#30
1V
0z
1T
03
b101 *
b101 y
1P
b100 F
06
b110 ,
b110 s
b110 x
b10101 !
b10101 (
0?
b0 5
0@
b1 )
b1 4
1L
0Q
b101 +
b101 r
b101 w
b101 E
0=
1N
b1 2
b10 C
0<
1H
1M
b1 1
b10 B
b0 0
b11 A
b1001 #
b1001 &
b1100 "
b1100 %
#40
b1 -
b1 }
1z
1~
13
16
1D
1?
b100 5
b1110 ,
b1110 s
b1110 x
1G
b111001 !
b111001 (
b1110 *
b1110 y
1U
b1100 F
0@
b101 )
b1 4
1V
b1101 +
b1101 r
b1101 w
b101 E
1=
1S
b11 2
b110 C
1<
1R
b11 1
b110 B
b10 0
b111 A
b11011 #
b11011 &
b11110 "
b11110 %
#50
b0 -
b0 }
0~
0z
03
b0 *
b0 y
0D
06
0T
b1 ,
b1 s
b1 x
0G
0;
b0 !
b0 (
0?
b0 5
0P
0U
b0 F
0@
b0 )
b0 4
0L
0Q
0V
b0 +
b0 r
b0 w
b0 E
08
0=
0N
0S
b0 2
b0 C
0<
0H
0M
0R
b0 1
b0 B
b0 0
b0 A
b0 #
b0 &
b0 "
b0 %
#60
1]
1p
1G
1o
1U
1k
16
1T
1j
1?
1P
1f
1>
1O
1e
1:
1K
1a
0q
0@
0Q
0V
0g
0l
b1 ,
b1 s
b1 x
0~
b1 /
b1 v
b1 |
0;
b0 4
0z
0L
b0 E
b0 *
b0 y
0b
b0 [
b0 !
b0 (
b0 -
b0 }
1n
17
1<
1H
1M
1R
1^
1c
1h
19
03
b0 )
1J
0D
b0 +
b0 r
b0 w
1`
0Z
b0 .
b0 u
b0 {
b1000 Y
b11 1
b111 B
b111 X
b11 0
b111 A
b111 W
1$
1'
b111 5
b1111 F
b11111 \
b11111111 #
b11111111 &
b11111111 "
b11111111 %
#70
1~
1D
0G
1Z
0U
0]
b11 t
0p
1V
1q
b1110 ,
b1110 s
b1110 x
0O
0T
b0 /
b0 v
b0 |
0o
1@
b10 )
b10 4
1b
1g
0K
b1101 *
b1101 y
0P
b1 F
b10110 !
b10110 (
b0 -
b0 }
0k
b111 \
1L
0Q
b1101 +
b1101 r
b1101 w
b101 E
1l
b11111 .
b11111 u
b11111 {
b1111 [
1=
1_
1d
b10 2
b1011 Y
0H
0M
0h
b1 1
b100 X
b100 A
b11 W
b10011101 #
b10011101 &
b1110011 "
b1110011 %
#80
1Z
0]
0p
1T
b11110 -
b11110 }
1q
1P
b101 F
b1110 ,
b1110 s
b1110 x
b1111010111 !
b1111010111 (
0e
0j
b0 t
b11110 /
b11110 v
b11110 |
0o
1;
b11 )
b11 4
b1101 *
b1101 y
0a
0f
0k
b1 \
0Q
1V
b1101 +
b1101 r
b1101 w
b101 E
1b
0g
1l
b11101 .
b11101 u
b11101 {
b1101 [
18
1N
0_
0d
b11 2
b10 C
b1000 Y
1M
0R
0^
0c
1h
b0 1
b101 B
b111 X
b10 A
b100 W
b11110100 #
b11110100 &
b10001011 "
b10001011 %
#90
b11 t
1g
b0 -
b0 }
1e
b0 /
b0 v
b0 |
0;
b10100 !
b10100 (
1a
b11 \
0@
b0 )
b0 4
1b
1l
b11111 .
b11111 u
b11111 {
b1111 [
08
1_
1i
b10 2
b1101 Y
0<
1^
0h
b1 1
b10 X
b1 0
b1 W
b1010101 #
b1010101 &
b101001 "
b101001 %
#100
0Z
0~
1]
1p
1T
0D
b110 -
b110 }
0q
1P
1O
b10 ,
b10 s
b10 x
1G
1j
b0 t
b111 /
b111 v
b111 |
1o
0Q
b11000100 !
b11000100 (
1K
b1 *
b1 y
1U
b1111 F
1f
1k
b11111 \
0;
0@
b0 )
b0 4
1L
0V
b1 +
b1 r
b1 w
b1 E
0b
1g
1l
b110 .
b110 u
b110 {
b110 [
18
0=
1I
0N
1d
b1 2
b1 C
b1111 Y
07
1<
1H
1R
0^
1c
1h
b10 1
b110 B
b0 X
b10 0
b111 A
b110 W
b11010 #
b11010 &
b11011110 "
b11011110 %
#110
