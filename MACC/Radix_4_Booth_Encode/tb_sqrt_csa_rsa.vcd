$date
	Sat Mar 29 00:58:26 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_sqrt_csa_rsa $end
$var wire 10 ! Out [9:0] $end
$var reg 9 " A [8:0] $end
$var reg 9 # B [8:0] $end
$var reg 1 $ Cin $end
$scope module dut $end
$var wire 9 % A [8:0] $end
$var wire 9 & B [8:0] $end
$var wire 1 ' Cin $end
$var wire 10 ( Out [9:0] $end
$var wire 3 ) o_rsa_2bit [2:0] $end
$var wire 4 * o_rsa_3bit [3:0] $end
$var wire 4 + o_rsa_3bit_add [3:0] $end
$var wire 4 , o_rsa_3bit_sub [3:0] $end
$var wire 5 - o_rsa_4bit [4:0] $end
$var wire 5 . o_rsa_4bit_add [4:0] $end
$var wire 5 / o_rsa_4bit_sub [4:0] $end
$scope module rsa_2bit $end
$var wire 2 0 A [1:0] $end
$var wire 2 1 B [1:0] $end
$var wire 2 2 B_xor [1:0] $end
$var wire 1 ' Cin $end
$var wire 1 3 Cout $end
$var wire 2 4 Sum [1:0] $end
$var wire 3 5 carry [2:0] $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 6 A $end
$var wire 1 7 B $end
$var wire 1 8 Cin $end
$var wire 1 9 Cout $end
$var wire 1 : Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 ; A $end
$var wire 1 < B $end
$var wire 1 = Cin $end
$var wire 1 > Cout $end
$var wire 1 ? Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_3bit_add $end
$var wire 3 @ A [2:0] $end
$var wire 3 A B [2:0] $end
$var wire 3 B B_xor [2:0] $end
$var wire 1 C Cin $end
$var wire 1 D Cout $end
$var wire 3 E Sum [2:0] $end
$var wire 4 F carry [3:0] $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 G A $end
$var wire 1 H B $end
$var wire 1 I Cin $end
$var wire 1 J Cout $end
$var wire 1 K Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 L A $end
$var wire 1 M B $end
$var wire 1 N Cin $end
$var wire 1 O Cout $end
$var wire 1 P Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 Q A $end
$var wire 1 R B $end
$var wire 1 S Cin $end
$var wire 1 T Cout $end
$var wire 1 U Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_3bit_sub $end
$var wire 3 V A [2:0] $end
$var wire 3 W B [2:0] $end
$var wire 3 X B_xor [2:0] $end
$var wire 1 Y Cin $end
$var wire 1 Z Cout $end
$var wire 3 [ Sum [2:0] $end
$var wire 4 \ carry [3:0] $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 ] A $end
$var wire 1 ^ B $end
$var wire 1 _ Cin $end
$var wire 1 ` Cout $end
$var wire 1 a Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 b A $end
$var wire 1 c B $end
$var wire 1 d Cin $end
$var wire 1 e Cout $end
$var wire 1 f Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 g A $end
$var wire 1 h B $end
$var wire 1 i Cin $end
$var wire 1 j Cout $end
$var wire 1 k Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_4bit_add $end
$var wire 4 l A [3:0] $end
$var wire 4 m B [3:0] $end
$var wire 4 n B_xor [3:0] $end
$var wire 1 o Cin $end
$var wire 1 p Cout $end
$var wire 4 q Sum [3:0] $end
$var wire 5 r carry [4:0] $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 s A $end
$var wire 1 t B $end
$var wire 1 u Cin $end
$var wire 1 v Cout $end
$var wire 1 w Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 x A $end
$var wire 1 y B $end
$var wire 1 z Cin $end
$var wire 1 { Cout $end
$var wire 1 | Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 } A $end
$var wire 1 ~ B $end
$var wire 1 !" Cin $end
$var wire 1 "" Cout $end
$var wire 1 #" Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[3] $end
$scope module FA $end
$var wire 1 $" A $end
$var wire 1 %" B $end
$var wire 1 &" Cin $end
$var wire 1 '" Cout $end
$var wire 1 (" Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_4bit_sub $end
$var wire 4 )" A [3:0] $end
$var wire 4 *" B [3:0] $end
$var wire 4 +" B_xor [3:0] $end
$var wire 1 ," Cin $end
$var wire 1 -" Cout $end
$var wire 4 ." Sum [3:0] $end
$var wire 5 /" carry [4:0] $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 0" A $end
$var wire 1 1" B $end
$var wire 1 2" Cin $end
$var wire 1 3" Cout $end
$var wire 1 4" Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 5" A $end
$var wire 1 6" B $end
$var wire 1 7" Cin $end
$var wire 1 8" Cout $end
$var wire 1 9" Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 :" A $end
$var wire 1 ;" B $end
$var wire 1 <" Cin $end
$var wire 1 =" Cout $end
$var wire 1 >" Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[3] $end
$scope module FA $end
$var wire 1 ?" A $end
$var wire 1 @" B $end
$var wire 1 A" Cin $end
$var wire 1 B" Cout $end
$var wire 1 C" Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module mux_4bit $end
$var wire 4 D" In0 [3:0] $end
$var wire 4 E" In1 [3:0] $end
$var wire 4 F" Out [3:0] $end
$var wire 1 G" Sel $end
$upscope $end
$scope module mux_5bit $end
$var wire 5 H" In0 [4:0] $end
$var wire 5 I" In1 [4:0] $end
$var wire 5 J" Out [4:0] $end
$var wire 1 K" Sel $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0K"
b0 J"
b10000 I"
b0 H"
0G"
b0 F"
b1000 E"
b0 D"
0C"
1B"
1A"
1@"
0?"
0>"
1="
1<"
1;"
0:"
09"
18"
17"
16"
05"
04"
13"
12"
11"
00"
b11111 /"
b0 ."
1-"
1,"
b1111 +"
b0 *"
b0 )"
0("
0'"
0&"
0%"
0$"
0#"
0""
0!"
0~
0}
0|
0{
0z
0y
0x
0w
0v
0u
0t
0s
b0 r
b0 q
0p
0o
b0 n
b0 m
b0 l
0k
1j
1i
1h
0g
0f
1e
1d
1c
0b
0a
1`
1_
1^
0]
b1111 \
b0 [
1Z
1Y
b111 X
b0 W
b0 V
0U
0T
0S
0R
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
b0 F
b0 E
0D
0C
b0 B
b0 A
b0 @
1?
0>
1=
0<
0;
0:
19
08
17
16
b10 5
b10 4
03
b1 2
b1 1
b1 0
b10000 /
b0 .
b0 -
b1000 ,
b0 +
b0 *
b10 )
b10 (
0'
b1 &
b1 %
0$
b1 #
b1 "
b10 !
$end
#10000
b10000 -
b10000 J"
1K"
b1000 *
b1000 F"
1G"
0=
13
09
b1000000001 !
b1000000001 (
1>
b100 5
1:
0?
b101 )
b1 4
1<
b11 2
06
1;
b11 1
b10 0
b11 #
b11 &
b10 "
b10 %
#20000
1?
1=
b1000000110 !
b1000000110 (
19
b110 5
b1001 *
b1001 F"
0:
b110 )
b10 4
1K
b1 +
b1 D"
b1 E
1a
b1001 ,
b1001 E"
b1 [
16
1G
1]
b11 0
b1 @
b1 V
b111 "
b111 %
#30000
b0 -
b0 J"
0K"
b1 *
b1 F"
0?
0G"
0=
03
09
0>
b101 !
b101 (
1:
b1 )
b1 4
07
0<
06
0;
18
b0 2
b0 0
1$
1'
b1 5
b100 "
b100 %
#40000
b10000 -
b10000 J"
1K"
1G"
13
1>
1=
0i
b1000001000 !
b1000001000 (
0:
19
b111 5
0?
b100 )
b0 4
1P
1f
0e
b1011 \
b1010 *
b1010 F"
0K
1U
b110 +
b110 D"
b110 E
0a
0k
b1010 ,
b1010 E"
b10 [
17
1<
1M
0c
b11 2
b10 B
b101 X
0G
1Q
0]
1g
b0 1
b10 A
b10 W
b100 @
b100 V
b1000 #
b1000 &
b10000 "
b10000 %
#50000
0D
1G"
0T
13
1>
1U
1k
0S
1i
0?
0O
b0 F
b1111 *
b1111 F"
1e
b1111 \
b11111 -
b11111 J"
1=
1K
1P
b111 +
b111 D"
b111 E
1a
1f
b1111 ,
b1111 E"
b111 [
1w
1|
1#"
1("
b1111 .
b1111 H"
b1111 q
14"
19"
1>"
1C"
b11111 /
b11111 I"
b1111 ."
b1111111100 !
b1111111100 (
19
0M
1c
0:
b100 )
b0 4
0<
b0 B
b111 X
16
1;
1G
1L
1]
1b
1s
1x
1}
1$"
10"
15"
1:"
1?"
08
b1 2
b1 1
b0 A
b0 W
b11 0
b111 @
b111 V
b1111 l
b1111 )"
0$
0'
b110 5
b1 #
b1 &
b111111111 "
b111111111 %
#60000
0K"
0G"
03
0>
1?
0=
09
b0 *
b0 F"
b0 -
b0 J"
0K
0P
0U
b0 +
b0 D"
b0 E
0a
0f
0k
b1000 ,
b1000 E"
b0 [
0w
0|
0#"
0("
b0 .
b0 H"
b0 q
04"
09"
0>"
0C"
b10000 /
b10000 I"
b0 ."
b11 !
b11 (
1:
b11 )
b11 4
07
1<
06
0;
0G
0L
0Q
0]
0b
0g
0s
0x
0}
0$"
00"
05"
0:"
0?"
18
b10 2
b0 0
b0 @
b0 V
b0 l
b0 )"
1$
1'
b1 5
b0 "
b0 %
#70000
0d
0Z
07"
1K
1U
1a
0`
1k
0j
b101 \
1w
14"
03"
b11101 /"
b111 *
b111 F"
b11 -
b11 J"
1P
b111 +
b111 D"
b111 E
0f
b101 ,
b101 E"
b101 [
1|
b11 .
b11 H"
b11 q
09"
b10001 /
b10001 I"
b1 ."
b1111111 !
b1111111 (
1H
1R
0^
0h
1t
01"
1:
b11 )
b11 4
b101 B
b10 X
b1 n
b1110 +"
16
1L
1b
1x
15"
08
b10 1
b101 A
b101 W
b1 m
b1 *"
b1 0
b10 @
b10 V
b10 l
b10 )"
0$
0'
b0 5
b110110 #
b110110 &
b1001001 "
b1001001 %
#80000
