$date
	Tue Apr 08 13:47:33 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_cla_nbit $end
$var wire 16 ! As [15:0] $end
$var wire 16 " Bs [15:0] $end
$var wire 1 # Cout $end
$var wire 16 $ S [15:0] $end
$var wire 16 % Ss [15:0] $end
$var reg 16 & A [15:0] $end
$var reg 16 ' B [15:0] $end
$var reg 1 ( Cin $end
$scope module dut $end
$var wire 16 ) A [15:0] $end
$var wire 16 * B [15:0] $end
$var wire 1 + Cin $end
$var wire 1 # Cout $end
$var wire 16 , S [15:0] $end
$var wire 4 - carry [3:0] $end
$scope begin cla_block[0] $end
$scope module cla_inst $end
$var wire 4 . A [3:0] $end
$var wire 4 / B [3:0] $end
$var wire 1 + Cin $end
$var wire 1 0 Cout $end
$var wire 4 1 S [3:0] $end
$upscope $end
$upscope $end
$scope begin cla_block[1] $end
$scope module cla_inst $end
$var wire 4 2 A [3:0] $end
$var wire 4 3 B [3:0] $end
$var wire 1 4 Cin $end
$var wire 1 5 Cout $end
$var wire 4 6 S [3:0] $end
$upscope $end
$upscope $end
$scope begin cla_block[2] $end
$scope module cla_inst $end
$var wire 4 7 A [3:0] $end
$var wire 4 8 B [3:0] $end
$var wire 1 9 Cin $end
$var wire 1 : Cout $end
$var wire 4 ; S [3:0] $end
$upscope $end
$upscope $end
$scope begin cla_block[3] $end
$scope module cla_inst $end
$var wire 4 < A [3:0] $end
$var wire 4 = B [3:0] $end
$var wire 1 > Cin $end
$var wire 1 ? Cout $end
$var wire 4 @ S [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 @
0?
0>
b0 =
b0 <
b0 ;
0:
09
b0 8
b0 7
b1 6
05
04
b1 3
b0 2
b1110 1
00
b100 /
b1010 .
b0 -
b11110 ,
0+
b10100 *
b1010 )
0(
b10100 '
b1010 &
b11110 %
b11110 $
0#
b10100 "
b1010 !
$end
#10000
19
b1011 6
b1 @
b11 1
15
b10 -
b1010110110011 %
b1010110110011 $
b1010110110011 ,
b101 ;
b1 /
b1110 3
b1 =
b10 .
b1101 2
b100 7
b1000011100001 '
b1000011100001 *
b1000011100001 "
b10011010010 &
b10011010010 )
b10011010010 !
#20000
0#
0?
0>
0:
09
05
b0 -
b1111 6
b110 1
b1111 ;
b1111111111110110 %
b1111111111110110 $
b1111111111110110 ,
b1111 @
b101 /
b0 3
b0 =
b1 .
b1111 2
b1111 7
b1111 <
b101 '
b101 *
b101 "
b1111111111110001 &
b1111111111110001 )
b1111111111110001 !
#30000
b1110 1
b1111111111001110 %
b1111111111001110 $
b1111111111001110 ,
b1100 6
b10 /
b11 3
b1100 .
b1001 2
b110010 '
b110010 *
b110010 "
b1111111110011100 &
b1111111110011100 )
b1111111110011100 !
#40000
1#
1?
b0 @
1>
1:
b0 ;
19
14
15
10
b1111 -
b1 6
b10100 %
b10100 $
b10100 ,
b100 1
b110 /
b1111 3
b1111 8
b1111 =
b1110 .
b1 2
b0 7
b0 <
b1111111111110110 '
b1111111111110110 *
b1111111111110110 "
b11110 &
b11110 )
b11110 !
#50000
0#
0?
b1111 @
0>
0:
b1111 ;
09
05
04
00
b0 -
b1101 1
b1111111111111101 %
b1111111111111101 $
b1111111111111101 ,
b1111 6
b1000 /
b101 .
b0 2
b1111111111111000 '
b1111111111111000 *
b1111111111111000 "
b101 &
b101 )
b101 !
#60000
19
1>
1#
b1000 1
15
b1101 6
1:
b1111 ;
1?
b1110 -
b1111111111011000 %
b1111111111011000 $
b1111111111011000 ,
b1111 @
b1 /
b111 .
b1110 2
b1111 7
b1111 <
b1111111111110001 '
b1111111111110001 *
b1111111111110001 "
b1111111111100111 &
b1111111111100111 )
b1111111111100111 !
#70000
1>
1:
19
15
14
10
0#
b0 6
b0 ;
b1000 @
b1000000000000000 %
b1000000000000000 $
b1000000000000000 ,
b0 1
0?
b111 -
b0 3
b0 8
b0 =
b1111 .
b1111 2
b111 <
b1 '
b1 *
b1 "
b111111111111111 &
b111111111111111 )
b111111111111111 !
#80000
b111 @
0>
0:
b1111 ;
09
05
b1111 6
04
00
1#
b111111111111111 %
b111111111111111 $
b111111111111111 ,
b1111 1
1?
b1000 -
b1111 /
b1111 3
b1111 8
b1111 =
b0 .
b0 2
b0 7
b1000 <
b1111111111111111 '
b1111111111111111 *
b1111111111111111 "
b1000000000000000 &
b1000000000000000 )
b1000000000000000 !
#90000
