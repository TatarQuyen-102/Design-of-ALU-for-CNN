$date
	Thu Apr 10 17:14:51 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module tb_cla_nbit $end
$var wire 16 ! As [15:0] $end
$var wire 16 " Bs [15:0] $end
$var wire 1 # Cout $end
$var wire 16 $ S [15:0] $end
$var wire 16 % Ss [15:0] $end
$var reg 16 & A [15:0] $end
$var reg 16 ' B [15:0] $end
$var reg 1 ( Cin $end
$scope module dut $end
$var wire 16 ) A [15:0] $end
$var wire 16 * B [15:0] $end
$var wire 16 + B_xor [15:0] $end
$var wire 1 , Cin $end
$var wire 1 # Cout $end
$var wire 16 - S [15:0] $end
$var wire 4 . carry [3:0] $end
$var wire 1 / carry_sign $end
$scope begin cla_block[0] $end
$scope module cla_inst $end
$var wire 4 0 A [3:0] $end
$var wire 4 1 B [3:0] $end
$var wire 1 , Cin $end
$var wire 1 2 Cout $end
$var wire 4 3 S [3:0] $end
$upscope $end
$upscope $end
$scope begin cla_block[1] $end
$scope module cla_inst $end
$var wire 4 4 A [3:0] $end
$var wire 4 5 B [3:0] $end
$var wire 1 6 Cin $end
$var wire 1 7 Cout $end
$var wire 4 8 S [3:0] $end
$upscope $end
$upscope $end
$scope begin cla_block[2] $end
$scope module cla_inst $end
$var wire 4 9 A [3:0] $end
$var wire 4 : B [3:0] $end
$var wire 1 ; Cin $end
$var wire 1 < Cout $end
$var wire 4 = S [3:0] $end
$upscope $end
$upscope $end
$scope begin cla_block[3] $end
$scope module cla_inst $end
$var wire 4 > A [3:0] $end
$var wire 4 ? B [3:0] $end
$var wire 1 @ Cin $end
$var wire 1 A Cout $end
$var wire 4 B S [3:0] $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 B
0A
0@
b0 ?
b0 >
b0 =
0<
0;
b0 :
b0 9
b1 8
07
06
b1 5
b0 4
b1110 3
02
b100 1
b1010 0
x/
b0 .
b11110 -
0,
b10100 +
b10100 *
b1010 )
0(
b10100 '
b1010 &
b11110 %
b11110 $
x#
b10100 "
b1010 !
$end
#10000
1;
17
b10 .
b1 B
b11 3
b1011 8
b1010110110011 %
b1010110110011 $
b1010110110011 -
b101 =
b1 1
b1110 5
b1 ?
b1000011100001 +
b10 0
b1101 4
b100 9
b1000011100001 '
b1000011100001 *
b1000011100001 "
b10011010010 &
b10011010010 )
b10011010010 !
#20000
1@
1<
1A
b1110 .
b1110 8
b1111 =
b1111 B
b1010 1
b1111 5
b1111 :
b1111 ?
b1111111111101100 %
b1111111111101100 $
b1111111111101100 -
b1100 3
b1111111111111010 +
b1 0
b1111 4
b1111 9
b1111 >
1(
1,
b101 '
b101 *
b101 "
b1111111111110001 &
b1111111111110001 )
b1111111111110001 !
#30000
0A
0@
0<
0;
07
b1111 =
b1111 B
06
02
b0 .
b1100 8
b10 1
b11 5
b0 :
b0 ?
b1111111111001110 %
b1111111111001110 $
b1111111111001110 -
b1110 3
b110010 +
b1100 0
b1001 4
0(
0,
b110010 '
b110010 *
b110010 "
b1111111110011100 &
b1111111110011100 )
b1111111110011100 !
#40000
1A
1@
1<
1;
16
17
12
b1111 .
b100 3
b1 8
b0 =
b10100 %
b10100 $
b10100 -
b0 B
b110 1
b1111 5
b1111 :
b1111 ?
b1111111111110110 +
b1110 0
b1 4
b0 9
b0 >
b1111111111110110 '
b1111111111110110 *
b1111111111110110 "
b11110 &
b11110 )
b11110 !
#50000
0;
0@
07
0<
0A
06
b0 =
b0 B
02
b0 .
b0 8
b111 1
b0 5
b0 :
b0 ?
b1101 %
b1101 $
b1101 -
b1101 3
b111 +
b101 0
b0 4
1(
1,
b1111111111111000 '
b1111111111111000 *
b1111111111111000 "
b101 &
b101 )
b101 !
#60000
16
12
b1 .
b110 3
b1111 8
b1111 =
b1111111111110110 %
b1111111111110110 $
b1111111111110110 -
b1111 B
b1110 1
b1110 +
b111 0
b1110 4
b1111 9
b1111 >
b1111111111110001 '
b1111111111110001 *
b1111111111110001 "
b1111111111100111 &
b1111111111100111 )
b1111111111100111 !
#70000
1@
1<
b0 =
1;
17
16
12
b111 .
b0 8
b1000 B
b1 1
b1000000000000000 %
b1000000000000000 $
b1000000000000000 -
b0 3
b1 +
b1111 0
b1111 4
b111 >
0(
0,
b1 '
b1 *
b1 "
b111111111111111 &
b111111111111111 )
b111111111111111 !
#80000
06
0;
0@
02
07
0<
1A
b1000 .
b1111 3
b1111 8
b1111 =
b111111111111111 %
b111111111111111 $
b111111111111111 -
b111 B
b1111 1
b1111 5
b1111 :
b1111 ?
b1111111111111111 +
b0 0
b0 4
b0 9
b1000 >
b1111111111111111 '
b1111111111111111 *
b1111111111111111 "
b1000000000000000 &
b1000000000000000 )
b1000000000000000 !
#90000
