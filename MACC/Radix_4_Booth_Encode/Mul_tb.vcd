$date
	Sun Mar 30 12:27:48 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module Mul_tb $end
$var wire 15 ! o_mul [14:0] $end
$var reg 8 " x [7:0] $end
$var reg 8 # y [7:0] $end
$scope module uut $end
$var wire 9 $ m_2x [8:0] $end
$var wire 15 % o_mul [14:0] $end
$var wire 9 & o_s1 [8:0] $end
$var wire 3 ' o_s1_be [2:0] $end
$var wire 9 ( o_s1_bec [8:0] $end
$var wire 9 ) o_s1_mux3to1 [8:0] $end
$var wire 9 * o_s1_mux3to1_not [8:0] $end
$var wire 10 + o_s2 [9:0] $end
$var wire 3 , o_s2_be [2:0] $end
$var wire 9 - o_s2_mux3to1 [8:0] $end
$var wire 10 . o_s3 [9:0] $end
$var wire 3 / o_s3_be [2:0] $end
$var wire 9 0 o_s3_mux3to1 [8:0] $end
$var wire 10 1 o_s4 [9:0] $end
$var wire 3 2 o_s4_be [2:0] $end
$var wire 9 3 o_s4_mux3to1 [8:0] $end
$var wire 8 4 x [7:0] $end
$var wire 8 5 y [7:0] $end
$scope module mul_2x $end
$var wire 8 6 A [7:0] $end
$var wire 9 7 Y [8:0] $end
$upscope $end
$scope module mux_s1 $end
$var wire 9 8 A [8:0] $end
$var wire 9 9 B [8:0] $end
$var wire 9 : C [8:0] $end
$var wire 9 ; Out [8:0] $end
$var wire 1 < S0 $end
$var wire 1 = S1 $end
$upscope $end
$scope module mux_s2 $end
$var wire 9 > A [8:0] $end
$var wire 9 ? B [8:0] $end
$var wire 9 @ C [8:0] $end
$var wire 9 A Out [8:0] $end
$var wire 1 B S0 $end
$var wire 1 C S1 $end
$upscope $end
$scope module mux_s3 $end
$var wire 9 D A [8:0] $end
$var wire 9 E B [8:0] $end
$var wire 9 F C [8:0] $end
$var wire 9 G Out [8:0] $end
$var wire 1 H S0 $end
$var wire 1 I S1 $end
$upscope $end
$scope module mux_s4 $end
$var wire 9 J A [8:0] $end
$var wire 9 K B [8:0] $end
$var wire 9 L C [8:0] $end
$var wire 9 M Out [8:0] $end
$var wire 1 N S0 $end
$var wire 1 O S1 $end
$upscope $end
$scope module be_s1 $end
$var wire 1 P B0 $end
$var wire 1 Q B1 $end
$var wire 1 R B2 $end
$var wire 1 S P0 $end
$var wire 1 T P1 $end
$var wire 1 U P2 $end
$upscope $end
$scope module be_s2 $end
$var wire 1 V B0 $end
$var wire 1 W B1 $end
$var wire 1 X B2 $end
$var wire 1 Y P0 $end
$var wire 1 Z P1 $end
$var wire 1 [ P2 $end
$upscope $end
$scope module be_s3 $end
$var wire 1 \ B0 $end
$var wire 1 ] B1 $end
$var wire 1 ^ B2 $end
$var wire 1 _ P0 $end
$var wire 1 ` P1 $end
$var wire 1 a P2 $end
$upscope $end
$scope module be_s4 $end
$var wire 1 b B0 $end
$var wire 1 c B1 $end
$var wire 1 d B2 $end
$var wire 1 e P0 $end
$var wire 1 f P1 $end
$var wire 1 g P2 $end
$upscope $end
$scope module mod_bec_s1 $end
$var wire 6 h AND_out [5:0] $end
$var wire 9 i B [8:0] $end
$var wire 9 j X [8:0] $end
$upscope $end
$scope module mux2to1_s1 $end
$var wire 9 k In0 [8:0] $end
$var wire 9 l In1 [8:0] $end
$var wire 9 m Out [8:0] $end
$var wire 1 n Sel $end
$upscope $end
$scope module sqrt_csa_rsa_s2 $end
$var wire 9 o A [8:0] $end
$var wire 9 p B [8:0] $end
$var wire 1 q Cin $end
$var wire 10 r Out [9:0] $end
$var wire 3 s o_rsa_2bit [2:0] $end
$var wire 4 t o_rsa_3bit [3:0] $end
$var wire 4 u o_rsa_3bit_add [3:0] $end
$var wire 4 v o_rsa_3bit_sub [3:0] $end
$var wire 5 w o_rsa_4bit [4:0] $end
$var wire 5 x o_rsa_4bit_add [4:0] $end
$var wire 5 y o_rsa_4bit_sub [4:0] $end
$scope module rsa_2bit $end
$var wire 2 z A [1:0] $end
$var wire 2 { B [1:0] $end
$var wire 2 | B_xor [1:0] $end
$var wire 1 q Cin $end
$var wire 1 } Cout $end
$var wire 2 ~ Sum [1:0] $end
$var wire 3 !" carry [2:0] $end
$var wire 1 "" carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 #" A $end
$var wire 1 $" B $end
$var wire 1 %" Cin $end
$var wire 1 &" Cout $end
$var wire 1 '" Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 (" A $end
$var wire 1 )" B $end
$var wire 1 *" Cin $end
$var wire 1 +" Cout $end
$var wire 1 ," Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_3bit_add $end
$var wire 3 -" A [2:0] $end
$var wire 3 ." B [2:0] $end
$var wire 3 /" B_xor [2:0] $end
$var wire 1 0" Cin $end
$var wire 1 1" Cout $end
$var wire 3 2" Sum [2:0] $end
$var wire 4 3" carry [3:0] $end
$var wire 1 4" carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 5" A $end
$var wire 1 6" B $end
$var wire 1 7" Cin $end
$var wire 1 8" Cout $end
$var wire 1 9" Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 :" A $end
$var wire 1 ;" B $end
$var wire 1 <" Cin $end
$var wire 1 =" Cout $end
$var wire 1 >" Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 ?" A $end
$var wire 1 @" B $end
$var wire 1 A" Cin $end
$var wire 1 B" Cout $end
$var wire 1 C" Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_3bit_sub $end
$var wire 3 D" A [2:0] $end
$var wire 3 E" B [2:0] $end
$var wire 3 F" B_xor [2:0] $end
$var wire 1 G" Cin $end
$var wire 1 H" Cout $end
$var wire 3 I" Sum [2:0] $end
$var wire 4 J" carry [3:0] $end
$var wire 1 K" carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 L" A $end
$var wire 1 M" B $end
$var wire 1 N" Cin $end
$var wire 1 O" Cout $end
$var wire 1 P" Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 Q" A $end
$var wire 1 R" B $end
$var wire 1 S" Cin $end
$var wire 1 T" Cout $end
$var wire 1 U" Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 V" A $end
$var wire 1 W" B $end
$var wire 1 X" Cin $end
$var wire 1 Y" Cout $end
$var wire 1 Z" Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_4bit_add $end
$var wire 4 [" A [3:0] $end
$var wire 4 \" B [3:0] $end
$var wire 4 ]" B_xor [3:0] $end
$var wire 1 ^" Cin $end
$var wire 1 _" Cout $end
$var wire 4 `" Sum [3:0] $end
$var wire 5 a" carry [4:0] $end
$var wire 1 b" carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 c" A $end
$var wire 1 d" B $end
$var wire 1 e" Cin $end
$var wire 1 f" Cout $end
$var wire 1 g" Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 h" A $end
$var wire 1 i" B $end
$var wire 1 j" Cin $end
$var wire 1 k" Cout $end
$var wire 1 l" Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 m" A $end
$var wire 1 n" B $end
$var wire 1 o" Cin $end
$var wire 1 p" Cout $end
$var wire 1 q" Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[3] $end
$scope module FA $end
$var wire 1 r" A $end
$var wire 1 s" B $end
$var wire 1 t" Cin $end
$var wire 1 u" Cout $end
$var wire 1 v" Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_4bit_sub $end
$var wire 4 w" A [3:0] $end
$var wire 4 x" B [3:0] $end
$var wire 4 y" B_xor [3:0] $end
$var wire 1 z" Cin $end
$var wire 1 {" Cout $end
$var wire 4 |" Sum [3:0] $end
$var wire 5 }" carry [4:0] $end
$var wire 1 ~" carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 !# A $end
$var wire 1 "# B $end
$var wire 1 ## Cin $end
$var wire 1 $# Cout $end
$var wire 1 %# Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 &# A $end
$var wire 1 '# B $end
$var wire 1 (# Cin $end
$var wire 1 )# Cout $end
$var wire 1 *# Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 +# A $end
$var wire 1 ,# B $end
$var wire 1 -# Cin $end
$var wire 1 .# Cout $end
$var wire 1 /# Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[3] $end
$scope module FA $end
$var wire 1 0# A $end
$var wire 1 1# B $end
$var wire 1 2# Cin $end
$var wire 1 3# Cout $end
$var wire 1 4# Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module mux_4bit $end
$var wire 4 5# In0 [3:0] $end
$var wire 4 6# In1 [3:0] $end
$var wire 4 7# Out [3:0] $end
$var wire 1 8# Sel $end
$upscope $end
$scope module mux_5bit $end
$var wire 5 9# In0 [4:0] $end
$var wire 5 :# In1 [4:0] $end
$var wire 5 ;# Out [4:0] $end
$var wire 1 <# Sel $end
$upscope $end
$upscope $end
$scope module sqrt_csa_rsa_s3 $end
$var wire 9 =# A [8:0] $end
$var wire 9 ># B [8:0] $end
$var wire 1 ?# Cin $end
$var wire 10 @# Out [9:0] $end
$var wire 3 A# o_rsa_2bit [2:0] $end
$var wire 4 B# o_rsa_3bit [3:0] $end
$var wire 4 C# o_rsa_3bit_add [3:0] $end
$var wire 4 D# o_rsa_3bit_sub [3:0] $end
$var wire 5 E# o_rsa_4bit [4:0] $end
$var wire 5 F# o_rsa_4bit_add [4:0] $end
$var wire 5 G# o_rsa_4bit_sub [4:0] $end
$scope module rsa_2bit $end
$var wire 2 H# A [1:0] $end
$var wire 2 I# B [1:0] $end
$var wire 2 J# B_xor [1:0] $end
$var wire 1 ?# Cin $end
$var wire 1 K# Cout $end
$var wire 2 L# Sum [1:0] $end
$var wire 3 M# carry [2:0] $end
$var wire 1 N# carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 O# A $end
$var wire 1 P# B $end
$var wire 1 Q# Cin $end
$var wire 1 R# Cout $end
$var wire 1 S# Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 T# A $end
$var wire 1 U# B $end
$var wire 1 V# Cin $end
$var wire 1 W# Cout $end
$var wire 1 X# Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_3bit_add $end
$var wire 3 Y# A [2:0] $end
$var wire 3 Z# B [2:0] $end
$var wire 3 [# B_xor [2:0] $end
$var wire 1 \# Cin $end
$var wire 1 ]# Cout $end
$var wire 3 ^# Sum [2:0] $end
$var wire 4 _# carry [3:0] $end
$var wire 1 `# carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 a# A $end
$var wire 1 b# B $end
$var wire 1 c# Cin $end
$var wire 1 d# Cout $end
$var wire 1 e# Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 f# A $end
$var wire 1 g# B $end
$var wire 1 h# Cin $end
$var wire 1 i# Cout $end
$var wire 1 j# Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 k# A $end
$var wire 1 l# B $end
$var wire 1 m# Cin $end
$var wire 1 n# Cout $end
$var wire 1 o# Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_3bit_sub $end
$var wire 3 p# A [2:0] $end
$var wire 3 q# B [2:0] $end
$var wire 3 r# B_xor [2:0] $end
$var wire 1 s# Cin $end
$var wire 1 t# Cout $end
$var wire 3 u# Sum [2:0] $end
$var wire 4 v# carry [3:0] $end
$var wire 1 w# carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 x# A $end
$var wire 1 y# B $end
$var wire 1 z# Cin $end
$var wire 1 {# Cout $end
$var wire 1 |# Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 }# A $end
$var wire 1 ~# B $end
$var wire 1 !$ Cin $end
$var wire 1 "$ Cout $end
$var wire 1 #$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 $$ A $end
$var wire 1 %$ B $end
$var wire 1 &$ Cin $end
$var wire 1 '$ Cout $end
$var wire 1 ($ Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_4bit_add $end
$var wire 4 )$ A [3:0] $end
$var wire 4 *$ B [3:0] $end
$var wire 4 +$ B_xor [3:0] $end
$var wire 1 ,$ Cin $end
$var wire 1 -$ Cout $end
$var wire 4 .$ Sum [3:0] $end
$var wire 5 /$ carry [4:0] $end
$var wire 1 0$ carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 1$ A $end
$var wire 1 2$ B $end
$var wire 1 3$ Cin $end
$var wire 1 4$ Cout $end
$var wire 1 5$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 6$ A $end
$var wire 1 7$ B $end
$var wire 1 8$ Cin $end
$var wire 1 9$ Cout $end
$var wire 1 :$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 ;$ A $end
$var wire 1 <$ B $end
$var wire 1 =$ Cin $end
$var wire 1 >$ Cout $end
$var wire 1 ?$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[3] $end
$scope module FA $end
$var wire 1 @$ A $end
$var wire 1 A$ B $end
$var wire 1 B$ Cin $end
$var wire 1 C$ Cout $end
$var wire 1 D$ Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_4bit_sub $end
$var wire 4 E$ A [3:0] $end
$var wire 4 F$ B [3:0] $end
$var wire 4 G$ B_xor [3:0] $end
$var wire 1 H$ Cin $end
$var wire 1 I$ Cout $end
$var wire 4 J$ Sum [3:0] $end
$var wire 5 K$ carry [4:0] $end
$var wire 1 L$ carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 M$ A $end
$var wire 1 N$ B $end
$var wire 1 O$ Cin $end
$var wire 1 P$ Cout $end
$var wire 1 Q$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 R$ A $end
$var wire 1 S$ B $end
$var wire 1 T$ Cin $end
$var wire 1 U$ Cout $end
$var wire 1 V$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 W$ A $end
$var wire 1 X$ B $end
$var wire 1 Y$ Cin $end
$var wire 1 Z$ Cout $end
$var wire 1 [$ Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[3] $end
$scope module FA $end
$var wire 1 \$ A $end
$var wire 1 ]$ B $end
$var wire 1 ^$ Cin $end
$var wire 1 _$ Cout $end
$var wire 1 `$ Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module mux_4bit $end
$var wire 4 a$ In0 [3:0] $end
$var wire 4 b$ In1 [3:0] $end
$var wire 4 c$ Out [3:0] $end
$var wire 1 d$ Sel $end
$upscope $end
$scope module mux_5bit $end
$var wire 5 e$ In0 [4:0] $end
$var wire 5 f$ In1 [4:0] $end
$var wire 5 g$ Out [4:0] $end
$var wire 1 h$ Sel $end
$upscope $end
$upscope $end
$scope module sqrt_csa_rsa_s4 $end
$var wire 9 i$ A [8:0] $end
$var wire 9 j$ B [8:0] $end
$var wire 1 k$ Cin $end
$var wire 10 l$ Out [9:0] $end
$var wire 3 m$ o_rsa_2bit [2:0] $end
$var wire 4 n$ o_rsa_3bit [3:0] $end
$var wire 4 o$ o_rsa_3bit_add [3:0] $end
$var wire 4 p$ o_rsa_3bit_sub [3:0] $end
$var wire 5 q$ o_rsa_4bit [4:0] $end
$var wire 5 r$ o_rsa_4bit_add [4:0] $end
$var wire 5 s$ o_rsa_4bit_sub [4:0] $end
$scope module rsa_2bit $end
$var wire 2 t$ A [1:0] $end
$var wire 2 u$ B [1:0] $end
$var wire 2 v$ B_xor [1:0] $end
$var wire 1 k$ Cin $end
$var wire 1 w$ Cout $end
$var wire 2 x$ Sum [1:0] $end
$var wire 3 y$ carry [2:0] $end
$var wire 1 z$ carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 {$ A $end
$var wire 1 |$ B $end
$var wire 1 }$ Cin $end
$var wire 1 ~$ Cout $end
$var wire 1 !% Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 "% A $end
$var wire 1 #% B $end
$var wire 1 $% Cin $end
$var wire 1 %% Cout $end
$var wire 1 &% Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_3bit_add $end
$var wire 3 '% A [2:0] $end
$var wire 3 (% B [2:0] $end
$var wire 3 )% B_xor [2:0] $end
$var wire 1 *% Cin $end
$var wire 1 +% Cout $end
$var wire 3 ,% Sum [2:0] $end
$var wire 4 -% carry [3:0] $end
$var wire 1 .% carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 /% A $end
$var wire 1 0% B $end
$var wire 1 1% Cin $end
$var wire 1 2% Cout $end
$var wire 1 3% Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 4% A $end
$var wire 1 5% B $end
$var wire 1 6% Cin $end
$var wire 1 7% Cout $end
$var wire 1 8% Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 9% A $end
$var wire 1 :% B $end
$var wire 1 ;% Cin $end
$var wire 1 <% Cout $end
$var wire 1 =% Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_3bit_sub $end
$var wire 3 >% A [2:0] $end
$var wire 3 ?% B [2:0] $end
$var wire 3 @% B_xor [2:0] $end
$var wire 1 A% Cin $end
$var wire 1 B% Cout $end
$var wire 3 C% Sum [2:0] $end
$var wire 4 D% carry [3:0] $end
$var wire 1 E% carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 F% A $end
$var wire 1 G% B $end
$var wire 1 H% Cin $end
$var wire 1 I% Cout $end
$var wire 1 J% Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 K% A $end
$var wire 1 L% B $end
$var wire 1 M% Cin $end
$var wire 1 N% Cout $end
$var wire 1 O% Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 P% A $end
$var wire 1 Q% B $end
$var wire 1 R% Cin $end
$var wire 1 S% Cout $end
$var wire 1 T% Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_4bit_add $end
$var wire 4 U% A [3:0] $end
$var wire 4 V% B [3:0] $end
$var wire 4 W% B_xor [3:0] $end
$var wire 1 X% Cin $end
$var wire 1 Y% Cout $end
$var wire 4 Z% Sum [3:0] $end
$var wire 5 [% carry [4:0] $end
$var wire 1 \% carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 ]% A $end
$var wire 1 ^% B $end
$var wire 1 _% Cin $end
$var wire 1 `% Cout $end
$var wire 1 a% Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 b% A $end
$var wire 1 c% B $end
$var wire 1 d% Cin $end
$var wire 1 e% Cout $end
$var wire 1 f% Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 g% A $end
$var wire 1 h% B $end
$var wire 1 i% Cin $end
$var wire 1 j% Cout $end
$var wire 1 k% Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[3] $end
$scope module FA $end
$var wire 1 l% A $end
$var wire 1 m% B $end
$var wire 1 n% Cin $end
$var wire 1 o% Cout $end
$var wire 1 p% Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module rsa_4bit_sub $end
$var wire 4 q% A [3:0] $end
$var wire 4 r% B [3:0] $end
$var wire 4 s% B_xor [3:0] $end
$var wire 1 t% Cin $end
$var wire 1 u% Cout $end
$var wire 4 v% Sum [3:0] $end
$var wire 5 w% carry [4:0] $end
$var wire 1 x% carry_sign $end
$scope begin adder_stage[0] $end
$scope module FA $end
$var wire 1 y% A $end
$var wire 1 z% B $end
$var wire 1 {% Cin $end
$var wire 1 |% Cout $end
$var wire 1 }% Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[1] $end
$scope module FA $end
$var wire 1 ~% A $end
$var wire 1 !& B $end
$var wire 1 "& Cin $end
$var wire 1 #& Cout $end
$var wire 1 $& Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[2] $end
$scope module FA $end
$var wire 1 %& A $end
$var wire 1 && B $end
$var wire 1 '& Cin $end
$var wire 1 (& Cout $end
$var wire 1 )& Sum $end
$upscope $end
$upscope $end
$scope begin adder_stage[3] $end
$scope module FA $end
$var wire 1 *& A $end
$var wire 1 +& B $end
$var wire 1 ,& Cin $end
$var wire 1 -& Cout $end
$var wire 1 .& Sum $end
$upscope $end
$upscope $end
$upscope $end
$scope module mux_4bit $end
$var wire 4 /& In0 [3:0] $end
$var wire 4 0& In1 [3:0] $end
$var wire 4 1& Out [3:0] $end
$var wire 1 2& Sel $end
$upscope $end
$scope module mux_5bit $end
$var wire 5 3& In0 [4:0] $end
$var wire 5 4& In1 [4:0] $end
$var wire 5 5& Out [4:0] $end
$var wire 1 6& Sel $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
06&
b0 5&
b0 4&
b0 3&
02&
b0 1&
b0 0&
b0 /&
0.&
1-&
1,&
1+&
0*&
0)&
1(&
1'&
1&&
0%&
0$&
1#&
1"&
1!&
0~%
0}%
1|%
1{%
1z%
0y%
1x%
b11111 w%
b0 v%
0u%
1t%
b1111 s%
b0 r%
b0 q%
0p%
0o%
0n%
0m%
0l%
0k%
0j%
0i%
0h%
0g%
0f%
0e%
0d%
0c%
0b%
0a%
0`%
0_%
0^%
0]%
0\%
b0 [%
b0 Z%
0Y%
0X%
b0 W%
b0 V%
b0 U%
0T%
1S%
1R%
1Q%
0P%
0O%
1N%
1M%
1L%
0K%
0J%
1I%
1H%
1G%
0F%
1E%
b1111 D%
b0 C%
0B%
1A%
b111 @%
b0 ?%
b0 >%
0=%
0<%
0;%
0:%
09%
08%
07%
06%
05%
04%
03%
02%
01%
00%
0/%
0.%
b0 -%
b0 ,%
0+%
0*%
b0 )%
b0 (%
b0 '%
0&%
0%%
0$%
0#%
0"%
0!%
0~$
0}$
0|$
0{$
0z$
b0 y$
b0 x$
0w$
b0 v$
b0 u$
b0 t$
b0 s$
b0 r$
b0 q$
b0 p$
b0 o$
b0 n$
b0 m$
b0 l$
0k$
b0 j$
b0 i$
0h$
b0 g$
b0 f$
b0 e$
0d$
b0 c$
b0 b$
b0 a$
0`$
1_$
1^$
1]$
0\$
0[$
1Z$
1Y$
1X$
0W$
0V$
1U$
1T$
1S$
0R$
0Q$
1P$
1O$
1N$
0M$
1L$
b11111 K$
b0 J$
0I$
1H$
b1111 G$
b0 F$
b0 E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
0<$
0;$
0:$
09$
08$
07$
06$
05$
04$
03$
02$
01$
00$
b0 /$
b0 .$
0-$
0,$
b0 +$
b0 *$
b0 )$
0($
1'$
1&$
1%$
0$$
0#$
1"$
1!$
1~#
0}#
0|#
1{#
1z#
1y#
0x#
1w#
b1111 v#
b0 u#
0t#
1s#
b111 r#
b0 q#
b0 p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
0g#
0f#
0e#
0d#
0c#
0b#
0a#
0`#
b0 _#
b0 ^#
0]#
0\#
b0 [#
b0 Z#
b0 Y#
0X#
0W#
0V#
0U#
0T#
0S#
0R#
0Q#
0P#
0O#
0N#
b0 M#
b0 L#
0K#
b0 J#
b0 I#
b0 H#
b0 G#
b0 F#
b0 E#
b0 D#
b0 C#
b0 B#
b0 A#
b0 @#
0?#
b0 >#
b0 =#
0<#
b0 ;#
b0 :#
b0 9#
08#
b0 7#
b0 6#
b0 5#
04#
13#
12#
11#
00#
0/#
1.#
1-#
1,#
0+#
0*#
1)#
1(#
1'#
0&#
0%#
1$#
1##
1"#
0!#
1~"
b11111 }"
b0 |"
0{"
1z"
b1111 y"
b0 x"
b0 w"
0v"
0u"
0t"
0s"
0r"
0q"
0p"
0o"
0n"
0m"
0l"
0k"
0j"
0i"
0h"
0g"
0f"
0e"
0d"
0c"
0b"
b0 a"
b0 `"
0_"
0^"
b0 ]"
b0 \"
b0 ["
0Z"
1Y"
1X"
1W"
0V"
0U"
1T"
1S"
1R"
0Q"
0P"
1O"
1N"
1M"
0L"
1K"
b1111 J"
b0 I"
0H"
1G"
b111 F"
b0 E"
b0 D"
0C"
0B"
0A"
0@"
0?"
0>"
0="
0<"
0;"
0:"
09"
08"
07"
06"
05"
04"
b0 3"
b0 2"
01"
00"
b0 /"
b0 ."
b0 -"
0,"
0+"
0*"
0)"
0("
0'"
0&"
0%"
0$"
0#"
0""
b0 !"
b0 ~
0}
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
0q
b0 p
b0 o
0n
b1 m
b111111111 l
b1 k
b111111111 j
b111111110 i
b0 h
0g
0f
0e
0d
0c
0b
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
1T
0S
0R
1Q
0P
0O
0N
b0 M
b1 L
b10 K
b0 J
0I
0H
b0 G
b1 F
b10 E
b0 D
0C
0B
b0 A
b1 @
b10 ?
b0 >
1=
0<
b1 ;
b1 :
b10 9
b0 8
b10 7
b1 6
b1 5
b1 4
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b111111110 *
b1 )
b111111111 (
b10 '
b1 &
b1 %
b10 $
b1 #
b1 "
b1 !
$end
#10000
1!%
b11111 1
b11111 l$
1&%
b11 m$
b11 x$
13%
1J%
b111 n$
b111 1&
1{$
18%
1=%
b111 o$
b111 /&
b111 ,%
1O%
1T%
b111 p$
b111 0&
b111 C%
1"%
1/%
1F%
b11 t$
14%
19%
1K%
1P%
b111 '%
b111 >%
b11111 i$
18#
1S#
1X#
b11 A#
b11 L#
1e#
1|#
b111 B#
b111 c$
b1111111 .
b1111111 @#
b11 E#
b11 g$
1}
1j#
1o#
b111 C#
b111 a$
b111 ^#
1#$
1($
b111 D#
b111 b$
b111 u#
15$
1:$
b11 F#
b11 e$
b11 .$
1Q$
1V$
b11 G#
b11 f$
b11 J$
1""
1O#
1T#
1a#
1x#
1+"
b100 !"
b11 H#
1f#
1k#
1}#
1$$
11$
16$
1M$
1R$
b111 Y#
b111 p#
b11 )$
b11 E$
b1111111 =#
1)"
b0 h
b111 t
b111 7#
b111111101 +
b111111101 r
b1111 w
b1111 ;#
b10 |
1'"
0,"
b101 s
b1 ~
19"
1>"
1C"
b111 u
b111 5#
b111 2"
1P"
1U"
1Z"
b111 v
b111 6#
b111 I"
1g"
1l"
1q"
1v"
b1111 x
b1111 9#
b1111 `"
1%#
1*#
1/#
14#
b1111 y
b1111 :#
b1111 |"
b10 {
b10 -
b10 A
b10 p
1<
1#"
1("
15"
1:"
1?"
1L"
1Q"
1V"
1c"
1h"
1m"
1r"
1!#
1&#
1+#
10#
b111111100 (
b111111100 j
b111111100 l
1S
b11 z
b111 -"
b111 D"
b1111 ["
b1111 w"
b11111110100 !
b11111110100 %
b111111111 o
b111111011 *
b111111011 i
0=
b111111100 &
b111111100 m
1C
b100 )
b100 ;
b100 k
0T
1n
1Z
b10 ,
0Q
1U
b101 '
1R
1V
b100 $
b100 7
b100 9
b100 ?
b100 E
b100 K
b10 #
b10 5
b10 "
b10 4
b10 6
b10 :
b10 @
b10 F
b10 L
#20000
13%
1J%
b111 n$
b111 1&
18%
1=%
b111 o$
b111 /&
b111 ,%
1O%
1T%
b111 p$
b111 0&
b111 C%
1/%
1F%
1&%
14%
19%
1K%
1P%
b111 '%
b111 >%
1"%
b11 E#
b11 g$
1o#
1($
15$
1:$
b11 F#
b11 e$
b11 .$
1Q$
1V$
b11 G#
b11 f$
b11 J$
b11110 1
b11110 l$
0!%
b10 m$
b10 x$
1k#
1$$
11$
16$
1M$
1R$
1j#
1#$
b11 )$
b11 E$
0{$
0H"
b10 t$
1f#
1}#
1K"
b11110 i$
1Y"
1l"
1q"
1v"
1*#
1/#
14#
b110 B#
b110 c$
b1111 w
b1111 ;#
1X"
1h"
1m"
1r"
1&#
1+#
10#
1S#
0e#
b110 C#
b110 a$
b110 ^#
0|#
b110 D#
b110 b$
b110 u#
1Z"
1g"
b1111 x
b1111 9#
b1111 `"
1%#
b1111 y
b1111 :#
b1111 |"
1T"
b1111 J"
1<#
1O#
0a#
0x#
1?"
1V"
1c"
1!#
b1111001 .
b1111001 @#
b110 Y#
b110 p#
b1111 ["
b1111 w"
11"
0X#
b1 A#
b1 L#
1:"
1Q"
14"
1B"
0T#
08#
b1 H#
1("
0'"
19"
1P"
0}
0C"
b1111001 =#
b11110011000 !
b11110011000 %
0""
1A"
0#"
15"
1L"
b111100110 +
b111100110 r
0+"
b0 !"
1="
b1100 3"
b1001 t
b1001 7#
b10 z
b111 -"
b111 D"
1,"
b10 s
b10 ~
0>"
b1001 u
b1001 5#
b1 2"
0U"
b101 v
b101 6#
b101 I"
b111111110 o
b111111000 &
b111111000 m
0<
0)"
1;"
0R"
b1 h
b111111000 (
b111111000 j
b111111000 l
0S
b0 |
b10 /"
b101 F"
b0 {
b10 ."
b10 E"
b111110111 *
b111110111 i
1=
b1000 -
b1000 A
b1000 p
b1000 )
b1000 ;
b1000 k
1T
b110 '
1Q
b10000 $
b10000 7
b10000 9
b10000 ?
b10000 E
b10000 K
b11 #
b11 5
b1000 "
b1000 4
b1000 6
b1000 :
b1000 @
b1000 F
b1000 L
#30000
0!%
1($
0h$
1&$
b111 n$
b111 1&
0{$
1"$
13%
b111 o$
b111 /&
b111 ,%
1J%
b111 p$
b111 0&
b111 C%
b11100 1
b11100 l$
1/%
1F%
1!$
1d$
0&%
b0 m$
b0 x$
1]#
1T#
b111 '%
b111 >%
1{#
b1111 v#
1K#
1`#
01"
0e#
0|#
1N#
0"%
1n#
04"
1W#
b0 t$
0B"
b11100 i$
0o#
1V#
1m#
1>"
1C"
1h#
1R#
b110 M#
b1110010 .
b1110010 @#
b100 B#
b100 c$
1i#
1O#
0A"
1d#
b1110 _#
0S#
1X#
b110 A#
b10 L#
1j#
b1010 C#
b1010 a$
b10 ^#
0#$
b100 D#
b100 b$
b100 u#
0("
b11 H#
0="
b0 z
1U"
1P#
1U#
1b#
1g#
0y#
0~#
b111111100 o
0<"
1a#
1x#
b11 J#
b11 [#
b100 r#
08"
b0 3"
0;"
1R"
b111 Y#
b111 p#
1""
b11 I#
b11 Z#
b11 q#
19"
b111 u
b111 5#
b111 2"
1P"
b111 v
b111 6#
b111 I"
b1111111 =#
1+"
b1111 0
b1111 G
b1111 >#
b111110001 &
b111110001 m
b11100100001 !
b11100100001 %
1*"
0<#
0,"
b111110001 (
b111110001 j
b111110001 l
b0 h
06"
1M"
b111111100 +
b111111100 r
1&"
b111 t
b111 7#
b0 /"
b111 F"
0'"
b0 ~
08#
1$"
1)"
b111110000 *
b111110000 i
b0 {
b0 ."
b0 E"
0C
1%"
0}
b0 s
b11 |
1I
b1111 )
b1111 ;
b1111 k
b0 -
b0 A
b0 p
0Z
1q
b111 !"
1`
b10 /
1W
1[
b100 ,
1X
1\
b11110 $
b11110 7
b11110 9
b11110 ?
b11110 E
b11110 K
b1111 #
b1111 5
b1111 "
b1111 4
b1111 6
b1111 :
b1111 @
b1111 F
b1111 L
#40000
1f%
1k%
1p%
1$&
1)&
1.&
1b%
1g%
1l%
1~%
1%&
1*&
1I$
0L$
0_$
1{"
1`$
0~"
b1111 q$
b1111 5&
0^$
03#
1a%
b1111 r$
b1111 3&
b1111 Z%
1}%
b1111 s$
b1111 4&
b1111 v%
0Z$
1h$
1]#
0t#
1[$
02#
1&%
1]%
1y%
1`#
1w#
0T$
0Y$
0.#
0=%
0T%
b1111 U%
b1111 q%
0d$
b111101011 1
b111101011 l$
1n#
1'$
b1111 v#
0P$
0U$
b1 K$
1H"
1"%
0K#
1!%
b11 m$
b11 x$
03%
0J%
b10 n$
b10 1&
1j#
0K"
0(#
0-#
09%
0P%
0N#
0m#
18%
b10 o$
b10 /&
b10 ,%
1O%
b10 p$
b10 0&
b10 C%
0?$
1a#
1x#
0Y"
b111 J"
0$#
0)#
b1 }"
0W#
0i#
1{$
0/%
0F%
0=$
1f#
1k#
1}#
1$$
01$
06$
0M$
0R$
0V$
b11 t$
14%
1K%
09$
b111 Y#
b111 p#
b0 )$
b0 E$
1@"
0W"
1d"
1i"
0"#
0'#
b10 '%
b10 >%
1:$
b11111 =#
b100 /"
b11 F"
b11 ]"
b1100 y"
1#$
17$
0S$
0V#
0h#
b111101011 i$
08$
b111 t
b111 7#
b1111110 +
b1111110 r
b11 w
b11 ;#
b100 ."
b100 E"
b11 \"
b11 x"
0R#
b0 M#
0d#
b1000 _#
b1011 B#
b1011 c$
b1110101111 .
b1110101111 @#
b11101 E#
b11101 g$
04$
b0 /$
1,"
b10 s
b10 ~
1C"
b111 u
b111 5#
b111 2"
1Z"
b1111 v
b1111 6#
b111 I"
1g"
1l"
0q"
0v"
b11 x
b11 9#
b11 `"
1%#
0*#
1/#
14#
b11101 y
b11101 :#
b1101 |"
b1110000 -
b1110000 A
b1110000 p
0g#
1~#
1S#
1X#
b11 A#
b11 L#
1e#
0o#
b1011 C#
b1011 a$
b11 ^#
1|#
0($
b11 D#
b11 b$
b11 u#
15$
b11 F#
b11 e$
b11 .$
1Q$
b11101 G#
b11101 f$
b1101 J$
b1 h
1("
0?"
0V"
0c"
0h"
0m"
0r"
0!#
0&#
0+#
00#
1B
b111001000 (
b111001000 j
b111001000 l
0P#
0U#
0b#
1l#
1y#
0%$
12$
0N$
b10 z
b11 -"
b11 D"
b0 ["
b0 w"
1Y
b101 ,
1H
b0 J#
b100 [#
b11 r#
b11 +$
b1100 G$
b111101011111000 !
b111101011111000 %
b1110 o
1_
b111000111 *
b111000111 i
b0 I#
b100 Z#
b100 q#
b11 *$
b11 F$
b111000 &
b111000 m
0I
b111000 )
b111000 ;
b111000 k
b1110000 0
b1110000 G
b1110000 >#
0n
0`
b1 /
0U
b10 '
0R
0V
0W
1]
b1110000 $
b1110000 7
b1110000 9
b1110000 ?
b1110000 E
b1110000 K
b11001 #
b11001 5
b111000 "
b111000 4
b111000 6
b111000 :
b111000 @
b111000 F
b111000 L
#50000
